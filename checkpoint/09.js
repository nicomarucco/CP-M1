const { BinarySearchTree } = require("../DS");
/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

9Ô∏è‚É£ ***** EJERCICIO 9 ***** - buscandoAlDoctor() 9Ô∏è‚É£ 

Agrega un nuevo m√©todo llamado buscandoAlDoctor al √°rbol binario. Este recibir√° como par√°metro un ID que
pertenece a un doctor. Debe devolver el nodo que representa al doctor buscado. 
Cada nodo es un objeto con las propiedades: id, nombre, edad y especialidad.

üìù EJEMPLO üìù
Dado el siguiente √°rbol (solo mostramos el id pero los dem√°s datos si est√°n):
               13
            /      \
          7         24
        /          /   \
       6         16     27
     /                    \
    3                     45
     \
      4

(INPUT) ‚û° 45
(OUTPUT) ‚û° Toda la informaci√≥n de este doctor.

(INPUT) ‚û° 5
(OUTPUT) ‚û° null, ya que no existe.

REQUISITOS
üü¢ La funci√≥n debe retornar el nodo completo que representa al doctor encontrado.
üü¢ La funci√≥n debe retornar null si no lo encuentra.
*/

BinarySearchTree.prototype.buscandoAlDoctor = function (id) {
  // Tu c√≥digo aqu√≠:
};

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = BinarySearchTree;
